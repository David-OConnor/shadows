(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[0],{

/***/ "./src/from_rust.js":
/*!**************************!*\
  !*** ./src/from_rust.js ***!
  \**************************/
/*! exports provided: scene_lib, view_mat, model_mat, proj_mat, rotator, __wbindgen_json_parse, __wbindgen_throw, __wbindgen_Math_tan */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scene_lib\", function() { return scene_lib; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"view_mat\", function() { return view_mat; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"model_mat\", function() { return model_mat; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"proj_mat\", function() { return proj_mat; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotator\", function() { return rotator; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_json_parse\", function() { return __wbindgen_json_parse; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_throw\", function() { return __wbindgen_throw; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_Math_tan\", function() { return __wbindgen_Math_tan; });\n/* harmony import */ var _from_rust_bg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./from_rust_bg */ \"./src/from_rust_bg.wasm\");\n/* tslint:disable */\n\n\nconst stack = [];\n\nconst slab = [{ obj: undefined }, { obj: null }, { obj: true }, { obj: false }];\n\nfunction getObject(idx) {\n    if ((idx & 1) === 1) {\n        return stack[idx >> 1];\n    } else {\n        const val = slab[idx >> 1];\n        \n        return val.obj;\n        \n    }\n}\n\nlet slab_next = slab.length;\n\nfunction dropRef(idx) {\n    \n    idx = idx >> 1;\n    if (idx < 4) return;\n    let obj = slab[idx];\n    \n    obj.cnt -= 1;\n    if (obj.cnt > 0) return;\n    \n    // If we hit 0 then free up our space in the slab\n    slab[idx] = slab_next;\n    slab_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropRef(idx);\n    return ret;\n}\n/**\n* @returns {any}\n*/\nfunction scene_lib() {\n    return takeObject(_from_rust_bg__WEBPACK_IMPORTED_MODULE_0__[\"scene_lib\"]());\n}\n\nlet cachegetFloat32Memory = null;\nfunction getFloat32Memory() {\n    if (cachegetFloat32Memory === null || cachegetFloat32Memory.buffer !== _from_rust_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer) {\n        cachegetFloat32Memory = new Float32Array(_from_rust_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer);\n    }\n    return cachegetFloat32Memory;\n}\n\nfunction passArrayF32ToWasm(arg) {\n    const ptr = _from_rust_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_malloc\"](arg.length * 4);\n    getFloat32Memory().set(arg, ptr / 4);\n    return [ptr, arg.length];\n}\n\nfunction getArrayF32FromWasm(ptr, len) {\n    return getFloat32Memory().subarray(ptr / 4, ptr / 4 + len);\n}\n\nlet cachedGlobalArgumentPtr = null;\nfunction globalArgumentPtr() {\n    if (cachedGlobalArgumentPtr === null) {\n        cachedGlobalArgumentPtr = _from_rust_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_global_argument_ptr\"]();\n    }\n    return cachedGlobalArgumentPtr;\n}\n\nlet cachegetUint32Memory = null;\nfunction getUint32Memory() {\n    if (cachegetUint32Memory === null || cachegetUint32Memory.buffer !== _from_rust_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer) {\n        cachegetUint32Memory = new Uint32Array(_from_rust_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer);\n    }\n    return cachegetUint32Memory;\n}\n/**\n* @param {Float32Array} arg0\n* @returns {Float32Array}\n*/\nfunction view_mat(arg0) {\n    const [ptr0, len0] = passArrayF32ToWasm(arg0);\n    const retptr = globalArgumentPtr();\n    _from_rust_bg__WEBPACK_IMPORTED_MODULE_0__[\"view_mat\"](retptr, ptr0, len0);\n    const mem = getUint32Memory();\n    const ptr = mem[retptr / 4];\n    const len = mem[retptr / 4 + 1];\n    \n    const realRet = getArrayF32FromWasm(ptr, len).slice();\n    _from_rust_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](ptr, len * 4);\n    return realRet;\n    \n}\n\n/**\n* @param {Float32Array} arg0\n* @param {number} arg1\n* @returns {Float32Array}\n*/\nfunction model_mat(arg0, arg1) {\n    const [ptr0, len0] = passArrayF32ToWasm(arg0);\n    const retptr = globalArgumentPtr();\n    _from_rust_bg__WEBPACK_IMPORTED_MODULE_0__[\"model_mat\"](retptr, ptr0, len0, arg1);\n    const mem = getUint32Memory();\n    const ptr = mem[retptr / 4];\n    const len = mem[retptr / 4 + 1];\n    \n    const realRet = getArrayF32FromWasm(ptr, len).slice();\n    _from_rust_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](ptr, len * 4);\n    return realRet;\n    \n}\n\n/**\n* @param {Float32Array} arg0\n* @param {Float32Array} arg1\n* @param {number} arg2\n* @param {number} arg3\n* @param {number} arg4\n* @param {number} arg5\n* @param {number} arg6\n* @param {number} arg7\n* @returns {Float32Array}\n*/\nfunction proj_mat(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7) {\n    const [ptr0, len0] = passArrayF32ToWasm(arg0);\n    const [ptr1, len1] = passArrayF32ToWasm(arg1);\n    const retptr = globalArgumentPtr();\n    _from_rust_bg__WEBPACK_IMPORTED_MODULE_0__[\"proj_mat\"](retptr, ptr0, len0, ptr1, len1, arg2, arg3, arg4, arg5, arg6, arg7);\n    const mem = getUint32Memory();\n    const ptr = mem[retptr / 4];\n    const len = mem[retptr / 4 + 1];\n    \n    const realRet = getArrayF32FromWasm(ptr, len).slice();\n    _from_rust_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](ptr, len * 4);\n    return realRet;\n    \n}\n\n/**\n* @param {Float32Array} arg0\n* @returns {Float32Array}\n*/\nfunction rotator(arg0) {\n    const [ptr0, len0] = passArrayF32ToWasm(arg0);\n    const retptr = globalArgumentPtr();\n    _from_rust_bg__WEBPACK_IMPORTED_MODULE_0__[\"rotator\"](retptr, ptr0, len0);\n    const mem = getUint32Memory();\n    const ptr = mem[retptr / 4];\n    const len = mem[retptr / 4 + 1];\n    \n    const realRet = getArrayF32FromWasm(ptr, len).slice();\n    _from_rust_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](ptr, len * 4);\n    return realRet;\n    \n}\n\nfunction addHeapObject(obj) {\n    if (slab_next === slab.length) slab.push(slab.length + 1);\n    const idx = slab_next;\n    const next = slab[idx];\n    \n    slab_next = next;\n    \n    slab[idx] = { obj, cnt: 1 };\n    return idx << 1;\n}\n\nconst TextDecoder = typeof self === 'object' && self.TextDecoder\n    ? self.TextDecoder\n    : __webpack_require__(/*! util */ \"./node_modules/util/util.js\").TextDecoder;\n\nlet cachedDecoder = new TextDecoder('utf-8');\n\nlet cachegetUint8Memory = null;\nfunction getUint8Memory() {\n    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== _from_rust_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer) {\n        cachegetUint8Memory = new Uint8Array(_from_rust_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer);\n    }\n    return cachegetUint8Memory;\n}\n\nfunction getStringFromWasm(ptr, len) {\n    return cachedDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n\nfunction __wbindgen_json_parse(ptr, len) {\n    return addHeapObject(JSON.parse(getStringFromWasm(ptr, len)));\n}\n\nfunction __wbindgen_throw(ptr, len) {\n    throw new Error(getStringFromWasm(ptr, len));\n}\n\nfunction __wbindgen_Math_tan(x) { return Math.tan(x); }\n\n\n\n//# sourceURL=webpack:///./src/from_rust.js?");

/***/ }),

/***/ "./src/from_rust_bg.wasm":
/*!*******************************!*\
  !*** ./src/from_rust_bg.wasm ***!
  \*******************************/
/*! exports provided: memory, __heap_base, __data_end, __rustc_debug_gdb_scripts_section__, scene_lib, view_mat, model_mat, proj_mat, rotator, __wbindgen_global_argument_ptr, __wbindgen_malloc, __wbindgen_free */
/***/ (function(module, exports, __webpack_require__) {

eval("\"use strict\";\n// Instantiate WebAssembly module\nvar wasmExports = __webpack_require__.w[module.i];\n__webpack_require__.r(exports);\n// export exports from WebAssembly module\nfor(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n// exec imports from WebAssembly module (for esm order)\n/* harmony import */ var m0 = __webpack_require__(/*! ./from_rust */ \"./src/from_rust.js\");\n\n\n// exec wasm module\nwasmExports[\"__webpack_init__\"]()\n\n//# sourceURL=webpack:///./src/from_rust_bg.wasm?");

/***/ })

}]);